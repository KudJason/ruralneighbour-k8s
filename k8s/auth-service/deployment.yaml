apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-service
  namespace: default
  labels:
    app: auth-service
    tier: backend
    version: v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: auth-service
      version: v1
  template:
    metadata:
      labels:
        app: auth-service
        version: v1
    spec:
      containers:
      - name: auth-service
        image: neighbor-connect/auth-service:latest
        ports:
        - containerPort: 8000
        env:
        # Database configuration for PostgreSQL
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secrets
              key: postgres-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secrets
              key: postgres-password
        - name: POSTGRES_HOST
          valueFrom:
            secretKeyRef:
              name: postgres-secrets
              key: postgres-host  
        - name: POSTGRES_PORT
          valueFrom:
            secretKeyRef:
              name: postgres-secrets
              key: postgres-port
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: auth-db
        - name: DATABASE_URL
          value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@$(POSTGRES_HOST):$(POSTGRES_PORT)/$(POSTGRES_DB)"
        # Redis configuration for event publishing
        - name: REDIS_HOST
          valueFrom:
            secretKeyRef:
              name: redis-secrets
              key: redis-host
        - name: REDIS_PORT
          valueFrom:
            secretKeyRef:
              name: redis-secrets
              key: redis-port
        - name: REDIS_URL
          value: "redis://$(REDIS_HOST):$(REDIS_PORT)"
        # Event streams configuration
        - name: USER_LIFECYCLE_STREAM
          valueFrom:
            configMapKeyRef:
              name: redis-config
              key: user-lifecycle-stream
        # JWT configuration - use secrets in production
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: auth-secrets
              key: jwt-secret-key
        - name: ALGORITHM
          value: "HS256"
        - name: ACCESS_TOKEN_EXPIRE_MINUTES
          value: "30"
        # Rate limiting
        - name: RATE_LIMIT_ENABLED
          value: "true"
        - name: RATE_LIMIT_REQUESTS
          value: "100"
        - name: RATE_LIMIT_WINDOW_SECONDS
          value: "60"
        # Environment
        - name: ENVIRONMENT
          value: "production"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "300m"
        livenessProbe:
          httpGet:
            path: /api/v1/auth/health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/v1/auth/health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
        startupProbe:
          httpGet:
            path: /api/v1/auth/health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 10
      imagePullSecrets:
      - name: regcred
      restartPolicy: Always

